# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Step 1: Checkout the repository
    - name: Checkout the repository
      uses: actions/checkout@v4

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRETS }}

    # Step 3: Debug Azure Secrets (optional for troubleshooting)
    - name: Debug Azure Secrets
      run: |
        echo "Tenant ID: $AZURE_TENANT_ID"
        echo "Client ID: $AZURE_CLIENT_ID"
        echo "Subscription ID: $AZURE_SUBSCRIPTION_ID"

    # Step 4: Set up Python for Checkov
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    # Step 5: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    # Step 6: Install Checkov
    - name: Install Checkov
      run: |
        python -m pip install --upgrade pip
        pip install checkov
        checkov --version  # Verify Checkov is installed

    # Step 7: Run Checkov to scan the Terraform code
    - name: Run Checkov
      run: checkov -d . || true

    # Step 8: Install TFLint
    - name: Install TFLint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        tflint --version  # Verify TFLint is installed

    # Step 9: Run TFLint to lint Terraform files
    - name: Run TFLint
      run: tflint || true  # If you want the pipeline to fail on issues, remove "|| true"

    # Step 10: Terraform Init for all environments
    - name: Terraform Init
      run: terraform init

    # Step 11: Terraform Plan for QA environment
    - name: Terraform Plan for QA
      run: terraform plan -var="env=qa" -out=tfplan-qa.binary

    # Step 12: Terraform Plan for PROD environment
    - name: Terraform Plan for PROD
      run: terraform plan -var="env=prod" -out=tfplan-prod.binary

    # Step 13: Terraform Show for QA environment
    - name: Terraform Show for QA
      run: terraform show -json tfplan-qa.binary > plan-qa.json

    # Step 14: Terraform Show for PROD environment
    - name: Terraform Show for PROD
      run: terraform show -json tfplan-prod.binary > plan-prod.json

    # Step 15: Install Infracost
    - name: Install Infracost
      run: |
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        infracost --version  # Verify Infracost is installed

    # Step 16: Configure Infracost API key
    # You need to set your Infracost API key in your GitHub repository secrets
    - name: Configure Infracost API key
      run: infracost configure set api_key ${{ secrets.INFRACOST_API_KEY }}

    # Step 17: Run Infracost for QA
    - name: Run Infracost for QA
      run: |
        infracost breakdown --path=plan-qa.json \
        --format=json --out-file=infracost-report-qa.json

    # Step 18: Run Infracost for PROD
    - name: Run Infracost for PROD
      run: |
        infracost breakdown --path=plan-prod.json \
        --format=json --out-file=infracost-report-prod.json

    # Step 19: Post Infracost Comment for PR (QA and PROD)
    # This step will only run for pull requests
    - name: Post Infracost Comment for QA and PROD
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        infracost comment github --path=infracost-report-qa.json \
        --repo=$GITHUB_REPOSITORY \
        --pull-request=$GITHUB_REF_NAME \
        --github-token=${{ secrets.GITHUB_TOKEN }}

        infracost comment github --path=infracost-report-prod.json \
        --repo=$GITHUB_REPOSITORY \
        --pull-request=$GITHUB_REF_NAME \
        --github-token=${{ secrets.GITHUB_TOKEN }}

    # Step 20: Terraform Apply for QA
    - name: Terraform Apply for QA
      run: terraform apply -var="env=qa" -auto-approve -input=false

    # Step 21: Terraform Apply for PROD
    - name: Terraform Apply for PROD
      run: terraform apply -var="env=prod" -auto-approve -input=false
