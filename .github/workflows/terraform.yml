# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
name: 'Terraform'

on:
  push:
    branches: [ "main", "dev", "qa", "production" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev  # This matches the environment configured in GitHub

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRETS }}

    # Step 3: Set environment variable
    - name: Set environment variable
      run: echo "ENV=${{ vars.ENV }}" >> $GITHUB_ENV

    # Step 4: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.0  # Specify the required Terraform version

    # Step 5: Verify Terraform installation
    - name: Verify Terraform installation
      run: terraform --version

    # Step 6: Import existing resource group for dev
    - name: Import existing resource group for dev
      run: |
        terraform import azurerm_resource_group.rg "/subscriptions/846df436-d658-402a-b0dd-89022775043b/resourceGroups/newresourcegroup1-dev"
      continue-on-error: true  # Skip if the resource group is already imported

    # Step 7: Terraform Init
    - name: Terraform Init
      run: terraform init

    # Step 8: Terraform Plan
    - name: Terraform Plan
      run: terraform plan -out=tfplan.binary

    # Step 9: Terraform Show
    # Convert the Terraform binary plan to JSON for Infracost
    - name: Terraform Show
      run: terraform show -json tfplan.binary > plan.json

    # Step 10: Install Infracost
    - name: Install Infracost
      run: |
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        infracost --version  # Verify Infracost is installed

    # Step 11: Configure Infracost API key
    - name: Configure Infracost API key
      run: infracost configure set api_key ${{ secrets.INFRACOST_API_KEY }}

    # Step 12: Run Infracost to calculate costs
    - name: Run Infracost
      run: |
        infracost breakdown --path=plan.json \
        --format=json --out-file=infracost-report.json

    # Step 13: Post Infracost comment to PR (if applicable)
    - name: Post Infracost Comment
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        infracost comment github --path=infracost-report.json \
        --repo=$GITHUB_REPOSITORY \
        --pull-request=$GITHUB_REF_NAME \
        --github-token=${{ secrets.GITHUB_TOKEN }}

  # Environment-specific Terraform applies
  apply_dev:
    name: Apply for dev environment
    needs: terraform
    runs-on: ubuntu-latest
    environment: dev  # No approval required for dev
    steps:
    # Step 1: Checkout the repository
    - name: Checkout the repository
      uses: actions/checkout@v4

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRETS }}

    # Step 3: Install Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "1.4.0"  # Specify the required Terraform version

    # Step 4: Terraform Init
    - name: Terraform Init for dev
      run: terraform init

    # Step 5: Terraform Apply
    - name: Terraform Apply for dev
      run: terraform apply -auto-approve -input=false

  apply_qa:
    name: Apply for QA environment
    needs: terraform
    runs-on: ubuntu-latest
    environment: qa  # Approval required in GitHub settings
    steps:
    # Step 1: Checkout the repository
    - name: Checkout the repository
      uses: actions/checkout@v4

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRETS }}

    # Step 3: Install Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "1.4.0"  # Specify the required Terraform version

    # Step 4: Terraform Init
    - name: Terraform Init for QA
      run: terraform init

    # Step 5: Terraform Apply
    - name: Terraform Apply for QA
      run: terraform apply -auto-approve -input=false

  apply_prod:
    name: Apply for Production environment
    needs: terraform
    runs-on: ubuntu-latest
    environment: production  # Approval required in GitHub settings
    steps:
    # Step 1: Checkout the repository
    - name: Checkout the repository
      uses: actions/checkout@v4

    # Step 2: Log in to Azure
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SECRETS }}

    # Step 3: Install Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "1.4.0"  # Specify the required Terraform version

    # Step 4: Terraform Init
    - name: Terraform Init for Production
      run: terraform init

    # Step 5: Terraform Apply
    - name: Terraform Apply for Production
      run: terraform apply -auto-approve -input=false



